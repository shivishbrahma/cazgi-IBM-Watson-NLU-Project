{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","className","Object","keys","this","props","emotions","map","key","React","Component","App","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","renderTextArea","document","getElementById","value","setState","renderTextBox","sendForSentimentAnalysis","url","axios","get","then","response","data","output","style","color","fontSize","sendForEmotionAnalysis","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3c99ca2c.chunk.js","sourcesContent":["import React from 'react';\nimport './bootstrap.min.css';\n\nclass EmotionTable extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<table className=\"table table-bordered\">\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//Write code to use the .map method that you worked on in the Hands-on React lab to extract the emotions\n\t\t\t\t\t\t\tObject.keys(this.props.emotions).map((key) => (\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<td>{key}</td>\n\t\t\t\t\t\t\t\t\t<td>{this.props.emotions[key]}</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t))\n\t\t\t\t\t\t}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default EmotionTable;\n","import './bootstrap.min.css';\nimport './App.css';\nimport EmotionTable from './EmotionTable.js';\nimport React from 'react';\nimport axios from 'axios';\n\nclass App extends React.Component {\n\tstate = {\n\t\tinnercomp: <textarea rows=\"4\" cols=\"50\" id=\"textinput\" />,\n\t\tmode: 'text',\n\t\tsentimentOutput: [],\n\t\tsentiment: true,\n\t};\n\n\trenderTextArea = () => {\n\t\tdocument.getElementById('textinput').value = '';\n\t\tif (this.state.mode === 'url') {\n\t\t\tthis.setState({\n\t\t\t\tinnercomp: <textarea rows=\"4\" cols=\"50\" id=\"textinput\" />,\n\t\t\t\tmode: 'text',\n\t\t\t\tsentimentOutput: [],\n\t\t\t\tsentiment: true,\n\t\t\t});\n\t\t}\n\t};\n\n\trenderTextBox = () => {\n\t\tdocument.getElementById('textinput').value = '';\n\t\tif (this.state.mode === 'text') {\n\t\t\tthis.setState({\n\t\t\t\tinnercomp: <textarea rows=\"1\" cols=\"50\" id=\"textinput\" />,\n\t\t\t\tmode: 'url',\n\t\t\t\tsentimentOutput: [],\n\t\t\t\tsentiment: true,\n\t\t\t});\n\t\t}\n\t};\n\n\tsendForSentimentAnalysis = () => {\n\t\tthis.setState({ sentiment: true });\n\t\tlet ret = '';\n\t\tlet url = '.';\n\n\t\tif (this.state.mode === 'url') {\n\t\t\turl =\n\t\t\t\turl +\n\t\t\t\t'/url/sentiment?url=' +\n\t\t\t\tdocument.getElementById('textinput').value;\n\t\t} else {\n\t\t\turl =\n\t\t\t\turl +\n\t\t\t\t'/text/sentiment?text=' +\n\t\t\t\tdocument.getElementById('textinput').value;\n\t\t}\n\t\tret = axios.get(url);\n\t\tret.then((response) => {\n\t\t\t//Include code here to check the sentiment and fomrat the data accordingly\n\n\t\t\tthis.setState({ sentimentOutput: response.data });\n\t\t\tlet output = response.data;\n\t\t\tif (response.data === 'positive') {\n\t\t\t\toutput = (\n\t\t\t\t\t<div style={{ color: 'green', fontSize: 20 }}>{response.data}</div>\n\t\t\t\t);\n\t\t\t} else if (response.data === 'negative') {\n\t\t\t\toutput = (\n\t\t\t\t\t<div style={{ color: 'red', fontSize: 20 }}>{response.data}</div>\n\t\t\t\t);\n\t\t\t} else if (response.data === 'neutral') {\n\t\t\t\toutput = (\n\t\t\t\t\t<div style={{ color: 'yellow', fontSize: 20 }}>{response.data}</div>\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\toutput = (\n\t\t\t\t\t<div style={{ color: 'orange', fontSize: 20 }}>{response.data}</div>\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis.setState({ sentimentOutput: output });\n\t\t});\n\t};\n\n\tsendForEmotionAnalysis = () => {\n\t\tthis.setState({ sentiment: false });\n\t\tlet ret = '';\n\t\tlet url = '.';\n\t\tif (this.state.mode === 'url') {\n\t\t\turl =\n\t\t\t\turl + '/url/emotion?url=' + document.getElementById('textinput').value;\n\t\t} else {\n\t\t\turl =\n\t\t\t\turl +\n\t\t\t\t'/text/emotion/?text=' +\n\t\t\t\tdocument.getElementById('textinput').value;\n\t\t}\n\t\tret = axios.get(url);\n\n\t\tret.then((response) => {\n\t\t\tthis.setState({\n\t\t\t\tsentimentOutput: <EmotionTable emotions={response.data} />,\n\t\t\t});\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<button className=\"btn btn-info\" onClick={this.renderTextArea}>\n\t\t\t\t\tText\n\t\t\t\t</button>\n\t\t\t\t<button className=\"btn btn-dark\" onClick={this.renderTextBox}>\n\t\t\t\t\tURL\n\t\t\t\t</button>\n\t\t\t\t<br />\n\t\t\t\t<br />\n\t\t\t\t{this.state.innercomp}\n\t\t\t\t<br />\n\t\t\t\t<button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>\n\t\t\t\t\tAnalyze Sentiment\n\t\t\t\t</button>\n\t\t\t\t<button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>\n\t\t\t\t\tAnalyze Emotion\n\t\t\t\t</button>\n\t\t\t\t<br />\n\t\t\t\t{this.state.sentimentOutput}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}